package net.minecraft.models;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class ModelAkrisae extends ModelBase
{
  //fields
        ModelRenderer head;
        ModelRenderer body;
        ModelRenderer rightarm;
        ModelRenderer leftarm;
        ModelRenderer rightleg;
        ModelRenderer leftleg;
        ModelRenderer Handle;
        ModelRenderer Rung1;
        ModelRenderer Rung2;
        ModelRenderer MaceBase;
        ModelRenderer HorizBackCase;
        ModelRenderer HorizRightCase;
        ModelRenderer HorizLeftCase;
        ModelRenderer HorizFrontCase;
        ModelRenderer VertBackCase;
        ModelRenderer VertTopCase;
        ModelRenderer VertBotCase;
        ModelRenderer VertFrontCase;
        ModelRenderer MaceTopCap;
        ModelRenderer CapSpike1;
        ModelRenderer CapSpike2;
        ModelRenderer CapSpike3;
        ModelRenderer CapSpike4;
        ModelRenderer GreenCube;
        ModelRenderer TSpike1;
        ModelRenderer TSpike2;
        ModelRenderer TSpike3;
        ModelRenderer BSpike1;
        ModelRenderer BSpike2;
        ModelRenderer BSpike3;
        ModelRenderer RSpike1;
        ModelRenderer RSpike2;
        ModelRenderer RSpike3;
        ModelRenderer LSpike1;
        ModelRenderer LSpike2;
        ModelRenderer LSpike3;
 
  public ModelAkrisae()
  {
        textureWidth = 128;
        textureHeight = 128;
        
        head = new ModelRenderer(this, 70, 47);
        head.addBox(-6F, -12F, -6F, 12, 12, 12);
        head.setRotationPoint(0F, -8F, 2F);
        head.setTextureSize(128, 128);
        head.mirror = true;
        setRotation(head, 0F, 0F, 0F);
        body = new ModelRenderer(this, 23, 100);
        body.addBox(-6F, -8F, -4F, 12, 16, 8);
        body.setRotationPoint(0F, 0F, 2F);
        body.setTextureSize(128, 128);
        body.mirror = true;
        setRotation(body, 0F, 0F, 0F);
        rightarm = new ModelRenderer(this, 66, 74);
        rightarm.addBox(-5F, -2F, -4F, 6, 16, 8);
        rightarm.setRotationPoint(-7F, -6F, 2F);
        rightarm.setTextureSize(128, 128);
        rightarm.mirror = true;
        setRotation(rightarm, 0F, 0F, 0F);
        leftarm = new ModelRenderer(this, 97, 74);
        leftarm.addBox(-1F, -2F, -4F, 6, 16, 8);
        leftarm.setRotationPoint(7F, -6F, 2F);
        leftarm.setTextureSize(128, 128);
        leftarm.mirror = true;
        setRotation(leftarm, 0F, 0F, 0F);
        rightleg = new ModelRenderer(this, 66, 100);
        rightleg.addBox(-2F, 0F, -2F, 6, 16, 8);
        rightleg.setRotationPoint(-4F, 8F, 0F);
        rightleg.setTextureSize(128, 128);
        rightleg.mirror = true;
        setRotation(rightleg, 0F, 0F, 0F);
        leftleg = new ModelRenderer(this, 97, 100);
        leftleg.addBox(-2F, 0F, -2F, 6, 16, 8);
        leftleg.setRotationPoint(2F, 8F, 0F);
        leftleg.setTextureSize(128, 128);
        leftleg.mirror = true;
        setRotation(leftleg, 0F, 0F, 0F);
        setRotation(leftleg, 0F, 0F, 0F);
        Handle = new ModelRenderer(this, 1, 13);
        Handle.addBox(-3F, 11.9F, -13F, 2, 2, 20);
        Handle.setRotationPoint(-7F, -6F, 2F);
        Handle.setTextureSize(128, 128);
        Handle.mirror = true;
        setRotation(Handle, 0F, 0F, 0F);
        Rung1 = new ModelRenderer(this, 0, 0);
        Rung1.addBox(-3.5F, 11.4F, -9.1F, 3, 3, 1);
        Rung1.setRotationPoint(-7F, -6F, 2F);
        Rung1.setTextureSize(128, 128);
        Rung1.mirror = true;
        setRotation(Rung1, 0F, 0F, 0F);
        Rung2 = new ModelRenderer(this, 0, 0);
        Rung2.addBox(-3.5F, 11.4F, -11.1F, 3, 3, 1);
        Rung2.setRotationPoint(-7F, -6F, 2F);
        Rung2.setTextureSize(128, 128);
        Rung2.mirror = true;
        setRotation(Rung2, 0F, 0F, 0F);
        MaceBase = new ModelRenderer(this, 0, 0);
        MaceBase.addBox(-4F, 10.9F, -14.5F, 4, 4, 2);
        MaceBase.setRotationPoint(-7F, -6F, 2F);
        MaceBase.setTextureSize(128, 128);
        MaceBase.mirror = true;
        setRotation(MaceBase, 0F, 0F, 0F);
        HorizBackCase = new ModelRenderer(this, 0, 0);
        HorizBackCase.addBox(-6F, 11.9F, -15F, 8, 2, 1);
        HorizBackCase.setRotationPoint(-7F, -6F, 2F);
        HorizBackCase.setTextureSize(128, 128);
        HorizBackCase.mirror = true;
        setRotation(HorizBackCase, 0F, 0F, 0F);
        HorizRightCase = new ModelRenderer(this, 0, 0);
        HorizRightCase.addBox(-6F, 11.9F, -23F, 1, 2, 8);
        HorizRightCase.setRotationPoint(-7F, -6F, 2F);
        HorizRightCase.setTextureSize(128, 128);
        HorizRightCase.mirror = true;
        setRotation(HorizRightCase, 0F, 0F, 0F);
        HorizLeftCase = new ModelRenderer(this, 0, 0);
        HorizLeftCase.addBox(1F, 11.9F, -23F, 1, 2, 8);
        HorizLeftCase.setRotationPoint(-7F, -6F, 2F);
        HorizLeftCase.setTextureSize(128, 128);
        HorizLeftCase.mirror = true;
        setRotation(HorizLeftCase, 0F, 0F, 0F);
        HorizFrontCase = new ModelRenderer(this, 0, 0);
        HorizFrontCase.addBox(-6F, 11.9F, -24F, 8, 2, 1);
        HorizFrontCase.setRotationPoint(-7F, -6F, 2F);
        HorizFrontCase.setTextureSize(128, 128);
        HorizFrontCase.mirror = true;
        setRotation(HorizFrontCase, 0F, 0F, 0F);
        VertBackCase = new ModelRenderer(this, 0, 0);
        VertBackCase.addBox(-3F, 8.9F, -15F, 2, 8, 1);
        VertBackCase.setRotationPoint(-7F, -6F, 2F);
        VertBackCase.setTextureSize(128, 128);
        VertBackCase.mirror = true;
        setRotation(VertBackCase, 0F, 0F, 0F);
        VertTopCase = new ModelRenderer(this, 0, 0);
        VertTopCase.addBox(-3F, 8.9F, -23F, 2, 1, 8);
        VertTopCase.setRotationPoint(-7F, -6F, 2F);
        VertTopCase.setTextureSize(128, 128);
        VertTopCase.mirror = true;
        setRotation(VertTopCase, 0F, 0F, 0F);
        VertBotCase = new ModelRenderer(this, 0, 0);
        VertBotCase.addBox(-3F, 15.9F, -23F, 2, 1, 8);
        VertBotCase.setRotationPoint(-7F, -6F, 2F);
        VertBotCase.setTextureSize(128, 128);
        VertBotCase.mirror = true;
        setRotation(VertBotCase, 0F, 0F, 0F);
        VertFrontCase = new ModelRenderer(this, 0, 0);
        VertFrontCase.addBox(-3F, 8.9F, -24F, 2, 8, 1);
        VertFrontCase.setRotationPoint(-7F, -6F, 2F);
        VertFrontCase.setTextureSize(128, 128);
        VertFrontCase.mirror = true;
        setRotation(VertFrontCase, 0F, 0F, 0F);
        MaceTopCap = new ModelRenderer(this, 0, 0);
        MaceTopCap.addBox(-4.5F, 10.4F, -25.5F, 5, 5, 2);
        MaceTopCap.setRotationPoint(-7F, -6F, 2F);
        MaceTopCap.setTextureSize(128, 128);
        MaceTopCap.mirror = true;
        setRotation(MaceTopCap, 0F, 0F, 0F);
        CapSpike1 = new ModelRenderer(this, 0, 0);
        CapSpike1.addBox(-3.5F, 11.4F, -26.5F, 1, 1, 1);
        CapSpike1.setRotationPoint(-7F, -6F, 2F);
        CapSpike1.setTextureSize(128, 128);
        CapSpike1.mirror = true;
        setRotation(CapSpike1, 0F, 0F, 0F);
        CapSpike2 = new ModelRenderer(this, 0, 0);
        CapSpike2.addBox(-1.5F, 11.4F, -26.5F, 1, 1, 1);
        CapSpike2.setRotationPoint(-7F, -6F, 2F);
        CapSpike2.setTextureSize(128, 128);
        CapSpike2.mirror = true;
        setRotation(CapSpike2, 0F, 0F, 0F);
        CapSpike3 = new ModelRenderer(this, 0, 0);
        CapSpike3.addBox(-3.5F, 13.4F, -26.5F, 1, 1, 1);
        CapSpike3.setRotationPoint(-7F, -6F, 2F);
        CapSpike3.setTextureSize(128, 128);
        CapSpike3.mirror = true;
        setRotation(CapSpike3, 0F, 0F, 0F);
        CapSpike4 = new ModelRenderer(this, 0, 0);
        CapSpike4.addBox(-1.5F, 13.4F, -26.5F, 1, 1, 1);
        CapSpike4.setRotationPoint(-7F, -6F, 2F);
        CapSpike4.setTextureSize(128, 128);
        CapSpike4.mirror = true;
        setRotation(CapSpike4, 0F, 0F, 0F);
        GreenCube = new ModelRenderer(this, 25, 1);
        GreenCube.addBox(-4.5F, 10.4F, -21.5F, 5, 5, 5);
        GreenCube.setRotationPoint(-7F, -6F, 2F);
        GreenCube.setTextureSize(128, 128);
        GreenCube.mirror = true;
        setRotation(GreenCube, 0F, 0F, 0F);
        TSpike1 = new ModelRenderer(this, 0, 0);
        TSpike1.addBox(-2.5F, 7.9F, -22.5F, 1, 1, 1);
        TSpike1.setRotationPoint(-7F, -6F, 2F);
        TSpike1.setTextureSize(128, 128);
        TSpike1.mirror = true;
        setRotation(TSpike1, 0F, 0F, 0F);
        TSpike2 = new ModelRenderer(this, 0, 0);
        TSpike2.addBox(-2.5F, 7.9F, -19.5F, 1, 1, 1);
        TSpike2.setRotationPoint(-7F, -6F, 2F);
        TSpike2.setTextureSize(128, 128);
        TSpike2.mirror = true;
        setRotation(TSpike2, 0F, 0F, 0F);
        TSpike3 = new ModelRenderer(this, 0, 0);
        TSpike3.addBox(-2.5F, 7.9F, -16.5F, 1, 1, 1);
        TSpike3.setRotationPoint(-7F, -6F, 2F);
        TSpike3.setTextureSize(128, 128);
        TSpike3.mirror = true;
        setRotation(TSpike3, 0F, 0F, 0F);
        BSpike1 = new ModelRenderer(this, 0, 0);
        BSpike1.addBox(-2.5F, 16.9F, -22.5F, 1, 1, 1);
        BSpike1.setRotationPoint(-7F, -6F, 2F);
        BSpike1.setTextureSize(128, 128);
        BSpike1.mirror = true;
        setRotation(BSpike1, 0F, 0F, 0F);
        BSpike2 = new ModelRenderer(this, 0, 0);
        BSpike2.addBox(-2.5F, 16.9F, -19.5F, 1, 1, 1);
        BSpike2.setRotationPoint(-7F, -6F, 2F);
        BSpike2.setTextureSize(128, 128);
        BSpike2.mirror = true;
        setRotation(BSpike2, 0F, 0F, 0F);
        BSpike3 = new ModelRenderer(this, 0, 0);
        BSpike3.addBox(-2.5F, 16.9F, -16.5F, 1, 1, 1);
        BSpike3.setRotationPoint(-7F, -6F, 2F);
        BSpike3.setTextureSize(128, 128);
        BSpike3.mirror = true;
        setRotation(BSpike3, 0F, 0F, 0F);
        RSpike1 = new ModelRenderer(this, 0, 0);
        RSpike1.addBox(-7F, 12.4F, -22.5F, 1, 1, 1);
        RSpike1.setRotationPoint(-7F, -6F, 2F);
        RSpike1.setTextureSize(128, 128);
        RSpike1.mirror = true;
        setRotation(RSpike1, 0F, 0F, 0F);
        RSpike2 = new ModelRenderer(this, 0, 0);
        RSpike2.addBox(-7F, 12.4F, -19.5F, 1, 1, 1);
        RSpike2.setRotationPoint(-7F, -6F, 2F);
        RSpike2.setTextureSize(128, 128);
        RSpike2.mirror = true;
        setRotation(RSpike2, 0F, 0F, 0F);
        RSpike3 = new ModelRenderer(this, 0, 0);
        RSpike3.addBox(-7F, 12.4F, -16.5F, 1, 1, 1);
        RSpike3.setRotationPoint(-7F, -6F, 2F);
        RSpike3.setTextureSize(128, 128);
        RSpike3.mirror = true;
        setRotation(RSpike3, 0F, 0F, 0F);
        LSpike1 = new ModelRenderer(this, 0, 0);
        LSpike1.addBox(2F, 12.4F, -22.5F, 1, 1, 1);
        LSpike1.setRotationPoint(-7F, -6F, 2F);
        LSpike1.setTextureSize(128, 128);
        LSpike1.mirror = true;
        setRotation(LSpike1, 0F, 0F, 0F);
        LSpike2 = new ModelRenderer(this, 0, 0);
        LSpike2.addBox(2F, 12.4F, -19.5F, 1, 1, 1);
        LSpike2.setRotationPoint(-7F, -6F, 2F);
        LSpike2.setTextureSize(128, 128);
        LSpike2.mirror = true;
        setRotation(LSpike2, 0F, 0F, 0F);
        LSpike3 = new ModelRenderer(this, 0, 0);
        LSpike3.addBox(2F, 12.4F, -16.5F, 1, 1, 1);
        LSpike3.setRotationPoint(-7F, -6F, 2F);
        LSpike3.setTextureSize(128, 128);
        LSpike3.mirror = true;
        setRotation(LSpike3, 0F, 0F, 0F);
  }
 
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
        super.render(entity, f, f1, f2, f3, f4, f5);
        setRotationAngles(f, f1, f2, f3, f4, f5);
        head.renderWithRotation(f5);
        body.renderWithRotation(f5);
        rightarm.renderWithRotation(f5);
        leftarm.renderWithRotation(f5);
        rightleg.renderWithRotation(f5);
        leftleg.renderWithRotation(f5);
        Handle.renderWithRotation(f5);
        Rung1.renderWithRotation(f5);
        Rung2.renderWithRotation(f5);
        MaceBase.renderWithRotation(f5);
        HorizBackCase.renderWithRotation(f5);
        HorizRightCase.renderWithRotation(f5);
        HorizLeftCase.renderWithRotation(f5);
        HorizFrontCase.renderWithRotation(f5);
        VertBackCase.renderWithRotation(f5);
        VertTopCase.renderWithRotation(f5);
        VertBotCase.renderWithRotation(f5);
        VertFrontCase.renderWithRotation(f5);
        MaceTopCap.renderWithRotation(f5);
        CapSpike1.renderWithRotation(f5);
        CapSpike2.renderWithRotation(f5);
        CapSpike3.renderWithRotation(f5);
        CapSpike4.renderWithRotation(f5);
        GreenCube.renderWithRotation(f5);
        TSpike1.renderWithRotation(f5);
        TSpike2.renderWithRotation(f5);
        TSpike3.renderWithRotation(f5);
        BSpike1.renderWithRotation(f5);
        BSpike2.renderWithRotation(f5);
        BSpike3.renderWithRotation(f5);
        RSpike1.renderWithRotation(f5);
        RSpike2.renderWithRotation(f5);
        RSpike3.renderWithRotation(f5);
        LSpike1.renderWithRotation(f5);
        LSpike2.renderWithRotation(f5);
        LSpike3.renderWithRotation(f5);
  }
 
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
        model.rotateAngleX = x;
        model.rotateAngleY = y;
        model.rotateAngleZ = z;
  }
 
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5)
  {
        super.setRotationAngles(f, f1, f2, f3, f4, f5, null);
        leftarm.rotateAngleX = MathHelper.cos(f * .5F) * 0.7F * f1;
        rightleg.rotateAngleX = MathHelper.cos(f * 0.6662F + (float)Math.PI) * 1.0F * f1;
        leftleg.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.0F * f1;
        rightarm.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        Handle.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        Rung1.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        Rung2.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        MaceBase.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        HorizBackCase.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        HorizRightCase.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        HorizLeftCase.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        HorizFrontCase.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        VertBackCase.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        VertTopCase.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        VertBotCase.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        VertFrontCase.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        MaceTopCap.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        CapSpike1.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        CapSpike2.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        CapSpike3.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        CapSpike4.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        GreenCube.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        TSpike1.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        TSpike2.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        TSpike3.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        BSpike1.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        BSpike2.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        BSpike3.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        RSpike1.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        RSpike2.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        RSpike3.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        LSpike1.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        LSpike2.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
        LSpike3.rotateAngleX = MathHelper.cos(f * .5F + (float)Math.PI) * 0.7F * f1;
  }

}